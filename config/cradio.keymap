// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 2500  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define MAC 0
#define WIN 1
#define RIG 2
#define LEF 3
#define TRI 4
#define MOUSE 5
#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT
#define U_WH_U &msc SCRL_UP
#define U_WH_D &msc SCRL_DOWN
#define U_WH_L &msc SCRL_LEFT
#define U_WH_R &msc SCRL_RIGHT

/ {
    chosen { zmk,charmap = &charmap_us; };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <300>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <0>;      // 0
            time-to-max-speed-ms = <40>;      // 500
            delay-ms = <0>;                   // 10
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W       &kp E        &kp R         &kp T             &kp Y    &kp U        &kp I        &kp O       &kp P
&kp A  &ht LALT S  &ht LCTRL D  &ht LGUI F    &kp G             &kp H    &ht RGUI J   &ht RCTRL K  &ht RALT L  &kp SEMICOLON
&kp Z  &kp X       &kp C        &kp V         &kp B             &kp N    &kp M        &kp COMMA    &kp DOT     &kp SLASH
                                &lt 2 RETURN  &kp LEFT_SHIFT    &kp TAB  &lt 1 SPACE
            >;
        };

        right_layer {
            bindings = <
&kp PIPE           &kp BACKSLASH     &kp MINUS     &kp UNDERSCORE  &trans           &kp PAGE_UP    &kp HOME        &kp UP_ARROW    &kp END          &kp PLUS
&kp TILDE          &kp GRAVE         &kp CAPSLOCK  &kp DELETE      &kp BACKSPACE    &kp PAGE_DOWN  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp EQUAL
&kp DOUBLE_QUOTES  &kp SINGLE_QUOTE  &trans        &trans          &trans           &trans         &trans          &trans          &trans           &bootloader
                                                   &trans          &kp ESC          &trans         &trans
            >;
        };

        left_layer {
            bindings = <
&kp EXCL     &kp AT            &kp HASH           &kp DLLR              &kp PRCNT                &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp MINUS  &kp SLASH
&kp CARET    &kp AMPERSAND     &kp ASTERISK       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp PLUS   &kp ASTERISK
&bootloader  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE        &kp RIGHT_BRACE          &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp DOT    &kp EQUAL
                                                  &trans                &trans                   &kp NUMBER_0  &trans
            >;
        };

        tri_layer {
            bindings = <
&kp F1  &kp F2   &kp F3   &kp F4   &bt BT_SEL 0    &bt BT_SEL 2  &out OUT_TOG   &trans  &kp C_MUTE    &kp C_PREV
&kp F5  &kp F6   &kp F7   &kp F8   &bt BT_SEL 1    &bt BT_SEL 3  &kp C_BRI_UP   &trans  &kp C_VOL_UP  &kp C_PP
&kp F9  &kp F10  &kp F11  &kp F12  &bt BT_CLR      &bt BT_SEL 4  &kp C_BRI_DEC  &trans  &kp C_VOL_DN  &kp C_NEXT
                          &trans   &trans          &to 0         &trans
            >;
        };

        mouse {
            bindings = <
&trans  &mkp MB4  &mkp MCLK  &mkp MB5   &trans        &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans
&trans  &trans    &trans     &trans     &trans        &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
&trans  &trans    &trans     &trans     &trans        &mkp LCLK       &mkp MCLK       &mkp RCLK     &mkp MB4         &mkp MB5
                             &kp SPACE  &kp LSHIFT    &to 0           &trans
            >;
        };
    };
};
